 Web
 
<<<< 웹 작동원리 - 네트워크 study1 

1. 기본용어 
인터넷 : tcp/ip라는 통신 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크

웹 : 이너넷에 연결된 컴퓨터를 통해 사람들이 정보를 공유할 수 잇는 전 세계적인 정보공간

http 클라이언트와 서버 사이에 이루어지는 요청 응답 프로토콜로 웹 시스템 내에서 옳은 동작을 위해 규정한 통신 규약이다

2. 웹의 탄생
ㄱ존에는 프로그램을 실행하기 위해서는 각자의 컴퓨터에서 명령ㅇ어를 ㅣ거나 해서 직접 실행 시켜야 했지만 웹이 나오면서 
다른곳에 있는 컴퓨터의 정보들과도 정보를 공유 할 수 있게 되었다

3. 웹의 동작과정 
먼저 웹 시스템을 만들기 위해 브라우저 시스템을 사용할 수 있다
브라우저의 주소에 내가 원하는 주소정보를 넣으면 브라우저를 통해 그 주소의 정보를 호가인할 수 있는데 
이때 내 브라우저를 클라이언트  그 주소가있는 컴퓨터를 웹서버라고 부른다
웹은 클라이언트이 요청과 서버의 응답을 ㅗ이루어져있다
그리고 그 컴퓨터의 주소를 우리 사람이 쉽게 볼 수 있게 만든것이 도메인이다

클라이언트는 사용자에게 보여지는 뷰를 담당하는 코드들로 구서오디어있고
웹서버는 보여지는 정보들을 저장하고 연산하는 코드들ㄹ ㅗ구성되어ㅣㅇㅆ다

4 포트 프로세스 프로그램

웹서버에 접속만 해서는 데이터를 가져올수 없고 코드가 계속 실행되어야한다
이때 코드으 ㅣ집합을 프로그램이라고 부른다
프로그램은 메모리에 올려져 프로세스가 된다
그리고 프로세스ㅡㄴ 포트를 이용해서 돌아간다

포트가,,,뭔데요,,? 

<<<< CORS와 해결방법(express,proxy)- 네트워크 study2

1. CORS란?
크로스 오리진 리소스 쉐어린 
같은 주소, 같은 포트안에있는 리소스를 불러올때는 문제가 없지만
다른 출처의 리소스를 요청하게 되면 보안적인 문제로 기본적으로 이를 차단함
HTTP헤더를 사용하여 브라우저가 한 출처에서 실행중인 웹 어플리케이션에 선택된 엑세스 권한을 부여하도록 하는 ㅔㅁ커니즘

2. 해결방법
2-1, 동일한 출처를 사용하기 (애쵸에 콜스 이슈 발생 노노 원초적해결,,)

2-2 서버쪽 해결(Response)
내가 서버를 제어할 수 있다면 
HTTP응답헤더 Access-Control-Allow-Origin: 설정해주기 / 허용하고자 하는 도메인 설정해주기
express에서는 이를 쉽게 해결해주는 미들웨어 제고ㅛㅇ
기본적으로 origin:*이 설정됨

2-3 클라이언트쪽 해결(request)
내가 서버 해더를 설정할 수 있는 상황이 아니라면
리소스 요청하는 서버사이에 프록시 서버를 하나 거쳐서 요청 응답을 주고받기!!

프록시 서버 : 브라우저와 서버를 통신하는 과정에서 정보교환을 도와주는 중간서버
프록시서버는 헤더를 추가하거나 요청을 허용/거부 하는 역할을 중간에서 해줘서 
Access-Control-Origin:* 의 헤더를 담아 응답해준다
하지만 아무레도 중간단계가 있기 때문에 속도가 느려지는단점이있따.

<<<< 쿠키(cookie), 세션(session) 과 캐시(cache) - 네트워크 study3

1. 쿠키
브라우저를 사용하는 환경(로컬컴퓨터)에 서버에서 받은 데이터를 저장한 파일
1) 로그인 정보 같이 유저가 굳이 다시 서버에 요쳥하기에느 비효율적인 정보를 로컬에 저장해둠으로 써 생산성을 높이는 것이 목적
2) 로그인 정보등 사용자의 정보가 저장되어있는 경우가 많아 보안문제를 잘 살펴야함
3) 다시 서버에 리퀘스트 할 필요가 없기떄무넹 속도가 빠름
>> 사용 예 : 자동 로그인 ,오늘 그만보기 팝업창 등

2. 세션
서버에서 유저의 인증상태를 임시로 저장한 파일
1)쿠키와 같이 임시로 유저의 정보를 저장해 둠으로써 생산성을 높이는 것이 목적
2)서버에 저장해두었기 때문에 쿠키보다 보안이 우수함
3) 서버에 저장되어 있어서 쿠키보다 다소 느리고 유저의 정보가많으면 메모리에 과부하가 생길 수있음
4) 서버에 관리하기 때문에 로그관리가 용이함
>>> 사용 예 : 로그인한 정보들

3. 쿠키와 세션
공통점: 데이터를 임시로 계속저장해두는 역할
차이점: 쿠키는 사용자에게 저장되고 세션은 서버에 저장됨

웹게발 시 어떤 정보를 쿠키로 저장할 지 세션을 ㅗ저장할 지 적절히 판단하는 것이 중요하다.

4.캐시 
브라우저를 사용하는 환경(로컬컴퓨터)에서 서버에서 받은 데이터를 저장한 파일(쿠키와 동일)
1) 이미지와 같은 재사용될것같거나 용량이 큰 리소스를 임시로 저장해두어 렌더링 속도를 높이는 것이 목적!!
2) 쿠키와 비슷하지만 목적성에 차이가 있다! 

<<<< REST API, HTTP - 네트워크 study4

1. REST API란? 
 - REST (Representational State Transfer):자원을 이름으로 구분하여 해당 자원의 상태를 주고받는 모든것을 의미
 - HTTP URI로 자원을 표현하고 HTTP메소드로 자원에 대한 행위를함

2. REST 구성
1) resource 자원 http uri
2) verb 자원에대한 행위 http method
3) represeatations 자원에 대한 행위의 내용 http message pay load

3. REST특징
- stateless : 상태정보를 따로 저장하지않음
- self-descriptiveness: rest api메시지만 보고 이를 쉽게 이해할 수 있는지 자체표현
- client-server구저 : 정보를 요청, 응답하는 부분이 따로 존재함

<<<< 웹에서의 프론트 서버 / 백엔드 서버 (개념) - 네트워크 study6

1. 서버 : 클라이언트에게 네트워크를 통해 서비스하는 컴퓨터를 의미한다
말그대로 어떤 요청을 원하는 대상에게 요청에 대한 응답을 넘겨주는 모든것들을 서버라고 함 그렇다면 웹에서 서버는 어떻게 동작할까

2. 웹에서의 서버
먼저 웹 환경에서는 브라우저가 클라이언트 역할을 한다
주소에 어떤 도메인이나 컴퓨터주소를 치면 해당 컴퓨터가 요청에 대한 응답을 하는데 이때 보통은 프론트서버 벡앤드 서버로 나뉘어짐

3. 프론트서버
프론트서버는 어떤 주소에 대한 요청을 보냈을때 마크업랭귀지를 보내줘서 사용자에게 쥐유아이 환경을 제공해주는 서버를의미한다(화면을 그려주는역할)
ex)react next styled component redux 

4. 백엔드 서버
백엔드 서버는 프론트서버와 통신하는 컴퓨터로 볼 수 있는데 
사용자가 프론트 서버에서 어떤 동작을 하였을 때, 사용자 정보나 해당 어플리케이션의 데이터에 접근하는 것을 가능하게 해주는 서버를 의미한다.
DB, express, rest API등등

5. 프론트 백엔드 분리이유
사실 GUI환경을 제공하는 컴퓨터와 어플리케이션 데이터들을 제공하는 컴퓨터를 한곳에 둘 수 도 있지만
데이터가 많아지면 분리해서 따로 컨트롤 하는것이 좋다 
1)속도적인측면 : 서보를 한 곳에 모아둘 경우 속도가 느려진다
2)관리적인 측면: 화면을 그려주는 방식과 데이터를 제공하는 방식은 많이 달라서 따로 분리해서 관리
서버를 추가할때도 백엔드 프로느앤드 중 필요한 부분만 추가하거나 할 수 있음

6. 프론트 백앤드 분리 문제점 : CORS 이슈
프론트 백엔드를 분리해서 통신하게 되면 
각자 다른 컴퓨터가 서로 통신을 하느 ㄴ것이기 때문에 콜스무제가 발생한다
서버에서 프론트 요청을 허용해주는 작업을 따로 해주어야한다.
