routes=[[-20,15], [-14,-5], [-18,-13], [-5,-3]]

#1. 포함관계 확인을 위해 routes배열을 오름차순으로 정렬시킨다
#2. 이미 시작점을 기준으로 오름차순으로 정렬되어있기 때문에 앞의 인덱스의 도착점이 다음경로의 시작점보다 크면 보함관계를 갖는것이다
#3. 2에서 포함관계를 찾았을 때, 그 안에 또 포함관계가 생겨날 수 있기 떄문에 계속 탐새을 해준다. 대신 standard(도착점)을 비교해주어 더 작은 수로 갱신시켜준다

#1.모든차가 카메라를 한 번 은 만나야한다
#2. 최소 몇대의 카메라를 설치해야 할까?

routes.sort()
standard=routes[0][1] #첫번째 기준은 첫번째 경로의 도착지점이어야 하기때문에 이렇게 초기화~!!
routes.pop(0)
answer=1 # 일단 하나 넣고 시작~

for route in routes : 
    if route[0] <= standard:#이러면 일단 포함임!!!
        standard=min(standard,route[1])
    else:#이러면 포함이 아님!!
        standard=route[1]#기준점 바꿔주자!!
        answer+=1
print(answer)